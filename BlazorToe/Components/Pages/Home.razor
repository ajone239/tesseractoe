@page "/"
@rendermode InteractiveServer

@using BlazorToe.Models
@using BlazorToe.Components.Components
@using BlazorToe.Utils

@implements IDisposable

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject IJSRuntime Js


<PageTitle>Home</PageTitle>

<div class="mb-4">
    <p class="border-bottom-2 border-dark text-dark">
        You are: @(_privateId.ToString())
    </p>
    <button class="btn btn-primary" @onclick="CreateNewGame">Create New Game</button>
</div>


<h3>Waiting Games (@WaitingGames.Count)</h3>

@if (WaitingGames.Any())
{
    @foreach (var game in WaitingGames)
    {
        <WaitingGame Game="game" OnJoinGame="() => JoinGame(game.Id)"/>
    }
}
else
{
    <p>There are no games :/</p>
}

<h3>Games in progress (@(ActiveGames.Count))</h3>

@if (ActiveGames.Any())
{
    @foreach (var game in ActiveGames)
    {
        <ActiveGame Game="game"/>
    }
}
else
{
    <p>There are no games :/</p>
}

@code
{
    private Guid _privateId;
    private List<Game>? _games;
    private CancellationTokenSource? _cts;

    private IList<Game> WaitingGames => _games?.Where(g => g.Player2Id is null).ToList() ?? [];
    private IList<Game> ActiveGames => _games?.Where(g => g.Player2Id is not null).ToList() ?? [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _privateId = await LocalStorage.GetPlayerId();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _cts = new();

        _ = Task.Run(async () =>
        {
            await PollGames(_cts.Token);
        });
    }
    
    async Task PollGames(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            var shouldUpdate = await GetGames();

            if (shouldUpdate)
            {
                await InvokeAsync(StateHasChanged);
            }
            
            await Task.Delay(1000, token);
        }
    }

    async Task<bool> GetGames()
    {
        var countBefore = _games?.Count ?? 0;
        var countAfter = countBefore;
        try
        {
            _games = await Http.GetFromJsonAsync<List<Game>>("http://localhost:3000/games");

            if (_games is null)
            {
                Console.WriteLine($"Games from endpoint were null{_privateId}!");
                return true;
            }
            
            countAfter = _games.Count;
            Console.WriteLine($"The request has run {_privateId}!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{_privateId} : {ex}");
        }

        return countAfter != countBefore;
    }

    async Task JoinGame(Guid gameId)
    {
        try
        {
            var request = new AcceptGame()
            {
                Player2Id = _privateId,
            };
            
            var requestUri = $"http://localhost:3000/games/{gameId}/accept";
            
            var result = await Http.PostAsJsonAsync(requestUri,request);
            
            
            if (!result.IsSuccessStatusCode)
            {
                await Js.InvokeVoidAsync("alert", "Could not accept!");
                return;
            }
            
            Navigation.NavigateTo($"/play/{gameId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{_privateId} : {ex}");
        }
    }

    async Task CreateNewGame()
    {
        Console.WriteLine($"trying to create a new game as {_privateId}");

        var request = new CreateGame
        {
            Player1Id = _privateId,
        };
        
        var result = await Http.PostAsJsonAsync(
            "http://localhost:3000/games",
            request
        );

        if (!result.IsSuccessStatusCode)
        {
            await Js.InvokeVoidAsync("alert", "Could not make game!");
            return;
        }

        var game = await result.Content.ReadFromJsonAsync<Game>();

        if (game is null)
        {
            await Js.InvokeVoidAsync("alert", "Could not make game!");
            return;
        }

        Navigation.NavigateTo($"/waiting/{game.Id}");
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
        
        Console.WriteLine($"Disposed {_privateId}");
    }
}
