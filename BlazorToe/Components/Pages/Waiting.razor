@page "/waiting/{WaitingGameId}"
@using BlazorToe.Models
@using BlazorToe.Utils
@using BlazorToe.Components.Components
@rendermode InteractiveServer

@implements IDisposable

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<h3>Waiting as @_privateId</h3>

<p>Seconds waited: @SecondsWaited</p>
    
@if (_game is not null)
{
    <ActiveGame Game="_game"/>
}
else
{
    <p>Welp</p>
}

@code {
    private Guid _privateId;
    private Game? _game;
    private CancellationTokenSource? _cts;

    private uint SecondsWaited = 0;

    [Parameter]
    public string WaitingGameId { get; set; } = Guid.Empty.ToString();

    protected override async Task OnInitializedAsync()
    {
        await GetGame();
        
        _cts = new();

        _ = Task.Run(async () =>
        {
            await PollGames(_cts.Token);
        });
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _privateId = await LocalStorage.GetPlayerId();
            StateHasChanged();
        }
    }
    
    async Task PollGames(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            await GetGame();
            SecondsWaited++;
            await InvokeAsync(StateHasChanged);

            if (_game?.GameState == "Playing") {
                Navigation.NavigateTo($"/play/{WaitingGameId}");
            }
            
            await Task.Delay(1000, token);
        }
    }

    async Task GetGame()
    {
        try
        {
            var requestUri = $"http://localhost:3000/games/{WaitingGameId}/status";
            _game = await Http.GetFromJsonAsync<Game>(requestUri);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{_privateId} : {ex}");
        }
    }
    
    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
        
        Console.WriteLine($"Disposed {_privateId}");
    }
}